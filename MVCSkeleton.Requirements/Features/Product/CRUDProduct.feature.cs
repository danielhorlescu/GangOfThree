// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18047
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MVCSkeleton.Requirements.Features.Product
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create, read, update, delete product")]
    public partial class CreateReadUpdateDeleteProductFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CRUDProduct.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create, read, update, delete product", "As a connected user\r\nI should be able to create, read, update and delete a produc" +
                    "t", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new product")]
        public virtual void CreateANewProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new product", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I navigate to the \'Product/Edit\' UrlConstants. page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "Unit Price",
                        "Units In Stock"});
            table1.AddRow(new string[] {
                        "Bread",
                        "1345",
                        "3.2",
                        "400"});
#line 7
 testRunner.And("I enter the product", ((string)(null)), table1, "And ");
#line 11
 testRunner.When("I click the \'saveProductBtn\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("I should be redirected to the \'Product/List\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("I should have the product listed in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a product")]
        public virtual void UpdateAProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a product", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Code",
                        "Unit Price",
                        "Units In Stock"});
            table2.AddRow(new string[] {
                        "362D6764-07A3-4A03-A430-00E21FFB4998",
                        "Bread",
                        "1345",
                        "3.2",
                        "400"});
#line 16
 testRunner.Given("I have the products", ((string)(null)), table2, "Given ");
#line 19
    testRunner.And("I navigate to the \'Product/List\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("I click edit for the \'362D6764-07A3-4A03-A430-00E21FFB4998\' product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Code",
                        "Unit Price",
                        "Units In Stock"});
            table3.AddRow(new string[] {
                        "362D6764-07A3-4A03-A430-00E21FFB4998",
                        "Onions",
                        "1245",
                        "1.2",
                        "100"});
#line 21
 testRunner.And("I enter the product", ((string)(null)), table3, "And ");
#line 24
 testRunner.When("I click the \'saveProductBtn\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I should be redirected to the \'Product/List\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("I should have the product listed in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a product")]
        public virtual void DeleteAProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a product", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Code",
                        "Unit Price",
                        "Units In Stock"});
            table4.AddRow(new string[] {
                        "362D6764-07A3-4A03-A430-00E21FFB4998",
                        "Bread",
                        "1345",
                        "3.2",
                        "400"});
            table4.AddRow(new string[] {
                        "E244995A-BFDA-452D-A6DF-A2C8D24BAEAB",
                        "Onions",
                        "1245",
                        "1.2",
                        "100"});
#line 29
 testRunner.Given("I have the products", ((string)(null)), table4, "Given ");
#line 33
    testRunner.And("I navigate to the \'Product/List\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("I click delete for the \'362D6764-07A3-4A03-A430-00E21FFB4998\' product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("The grid should not contain the \'362D6764-07A3-4A03-A430-00E21FFB4998\' product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete selected products")]
        public virtual void DeleteSelectedProducts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete selected products", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Code",
                        "Unit Price",
                        "Units In Stock"});
            table5.AddRow(new string[] {
                        "362D6764-07A3-4A03-A430-00E21FFB4998",
                        "Bread",
                        "1345",
                        "3.2",
                        "400"});
            table5.AddRow(new string[] {
                        "E244995A-BFDA-452D-A6DF-A2C8D24BAEAB",
                        "Onions",
                        "1245",
                        "1.2",
                        "100"});
            table5.AddRow(new string[] {
                        "07C11B77-97F6-406B-B45B-D32213E9F338",
                        "Garlic",
                        "5441",
                        "2.7",
                        "1000"});
#line 38
 testRunner.Given("I have the products", ((string)(null)), table5, "Given ");
#line 43
    testRunner.And("I navigate to the \'Product/List\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I select products \'362D6764-07A3-4A03-A430-00E21FFB4998,07C11B77-97F6-406B-B45B-D" +
                    "32213E9F338\' and click the Delete Selected button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("The grid should not contain the \'362D6764-07A3-4A03-A430-00E21FFB4998,07C11B77-97" +
                    "F6-406B-B45B-D32213E9F338\' products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
